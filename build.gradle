// 根build.gradle配置

// Spring Boot Gradle插件 使用参考：https://docs.spring.io/spring-boot/docs/2.5.3/gradle-plugin/reference/htmlsingle/
// 新式插件使用方式:plugins DSL（https://docs.gradle.org/current/userguide/plugins.html#sec:plugins_block）
// 区别于：buildscript block（https://docs.gradle.org/current/userguide/plugins.html#sec:applying_plugins_buildscript）
plugins {
    id "org.springframework.boot" version "2.5.0"
    id 'java'
    // （Isolation）隔离依赖，不将com.example.hello插件应用到所有的子Module中
    //id 'com.example.hello' version '1.0.0' apply false
}

// 所有子Module均使用到的配置
subprojects {

    apply plugin: 'java'
    apply plugin: 'war'
    apply plugin: 'idea'
    // Spring 必加的2个依赖
    apply plugin: 'org.springframework.boot'
    // 使用 io.spring.dependency-management（依赖管理） 插件或 Gradle 的原生 bom，支持管理 Spring Boot 应用程序中的依赖项
    // Spring Boot插件将自动从使用的Spring Boot版本导入spring-boot-dependencies，你可以省略bom中声明依赖的版本号。
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    group 'org.cwj.noah'
    version '1.0-SNAPSHOT'

    // java编译的时候缺省状态下会因为中文字符而失败
    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    // 将会创建一个可执行的jar，需要一个main()
    bootJar {
        // true：开启；false：禁用
        enabled = true
    }

    /*// 创建一个普通的jar
    jar {
        // true：开启；false：禁用
        enabled = false
    }*/

// 如果打包失败则放开该注释，再进行尝试
//    buildscript {
//        repositories {
//            mavenCentral();
//        }
//
//
//        dependencies {
//            classpath("org.springframework.boot:spring-boot-gradle-plugin:2.5.0")
//        }
//
//    }

    repositories {
        mavenCentral()
        // 声明要发布到的私有Maven存储库
        maven {
            // Gradle7.0后，再配置Maven仓库url时需要添加此选项
            allowInsecureProtocol = true
            // 指定要上传的maven仓库
            url NEXUS_REPOSITORY_URL
            // 认证
            credentials {
                username = NEXUS_USERNAME
                password = NEXUS_PASSWORD
            }
        }
    }

    configurations.all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude module: 'logback-classic'
        exclude module: 'logback-core'
        exclude module: 'log4j-over-slf4j'
        exclude module: 'slf4j-log4j12'
    }

    configurations {
        compile.exclude group: 'ch.qos.logback'
    }


    // 所有子项目公用的依赖。每个项目单独的依赖请在子项目的 build.gradle 中配置
    //
    // 当应用 io.spring.dependency-management 插件时，Spring Boot 的插件会自动从使用的 Spring Boot 版本中导入 spring-boot-dependencies bom。
    // 这提供了与 Maven 用户所享受的类似的依赖管理体验。
    dependencies {
        // 起步依赖
        implementation('org.springframework.boot:spring-boot-starter-web') {
            exclude module: 'org.springframework.boot:spring-boot-starter-logging'
        }
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'

        // 邮件处理
        implementation 'org.springframework.boot:spring-boot-starter-mail'

        // 监控系统健康情况的工具
        implementation 'org.springframework.boot:spring-boot-starter-actuator'

        // 安全组件
        implementation 'org.springframework.boot:spring-boot-starter-security'

        // AOP 面向切面
        // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-aop
        implementation 'org.springframework.boot:spring-boot-starter-aop'

        // validation 校验
        // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-validation
        implementation 'org.springframework.boot:spring-boot-starter-validation'

        // Lombok 依赖处理
        //implementation 'org.projectlombok:lombok'
        // https://mvnrepository.com/artifact/org.projectlombok/lombok
        compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.20'
        // 一定要添加 annotationProcessor 依赖，否则@Data一直提示：找不到符号
        // 解决方法：https://projectlombok.org/setup/gradle
        annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.20'

        //-------- Swagger 组件依赖 ----------
        // https://mvnrepository.com/artifact/io.springfox/springfox-swagger2
        implementation group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'
        // Swagger默认UI：https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui
        // 使用方式：http://localhost:8082/swagger-ui.html
        implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.2'
        // Swagger第三方UI：https://mvnrepository.com/artifact/com.github.xiaoymin/swagger-bootstrap-ui
        // 使用方式：http://localhost:8082/doc.html
        implementation group: 'com.github.xiaoymin', name: 'swagger-bootstrap-ui', version: '1.9.6'


        // Spring WebFlux 组建依赖
        //implementation 'org.springframework.boot:spring-boot-starter-webflux'
        //testImplementation 'io.projectreactor:reactor-test'

        //compile group: 'org.springframework.boot', name: 'spring-boot-starter-log4j2', version: '2.4.0'
        // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
        implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.14.1'


        // 由square推出的开源java代码生成框架，提供Java Api生成.java源文件。
        // 可搭配 Java APT 技术一同使用。
        // 通过这种自动化生成代码的方式，可以让我们用更加简洁优雅的方式要替代繁琐冗杂的重复工作。
        // https://mvnrepository.com/artifact/com.squareup/javapoet
        implementation 'com.squareup:javapoet:1.13.0'

        // 2021-12-30 14:48:14 注释：影响AppRun启动
        // 使用自定义的AnnotationProcessing
//        implementation 'com.cwj:anno_source:1.0.6:plain@jar'
//        //注解处理器所在的包
//        annotationProcessor 'com.cwj:anno_source:1.0.6:plain@jar'

        // https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp
        implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.9.3'

        // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
        implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'

        // https://mvnrepository.com/artifact/com.alibaba/fastjson
        implementation group: 'com.alibaba', name: 'fastjson', version: '1.2.79'

    }

    // 声明编译过程中需要用到 自定义的AnnotationProcessing
    //compileJava.options.compilerArgs << "-processor" << "com.cwj.anno.apt.HelloProcess"

    test {
        useJUnitPlatform()
    }
    // 创建Docker镜像
    //bootBuildImage
}