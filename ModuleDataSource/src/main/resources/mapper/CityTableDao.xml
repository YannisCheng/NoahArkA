<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
XML的mapper文件与Java的接口文件间的关系：
一个mapper文件对应于原数据持久化中DAO层的实现，即：Java代码编写DAO层接口，XML的mapper文件通过sql语句进行具体实现。

mapper文件的作用：专注于sql语句的编写。

一个mapper文件中的内容分为3部分：
1. 结果集声明
 1）将Java中bean类的变量与table表中字段进行映射
        当对象和数据库table之间不是简单的一对一对应的时候，我们可能需要指定对象的property和表的column之间的对应关系.
        例如，当column和property的name不同时，我们可以通过定义resultMap的形式来定义他们之间的对应关系。
 2）声明结果集
     a. 纯粹的单个结果集
     b. 嵌套结果集
2. 公用sql片段声明
3. DAO层接口中声明方法的具体sql实现

-->
<mapper namespace="com.cwj.datasource.mysql.dao.CityTableDao">
    <!--结果集声明-->
    <resultMap id="BaseResultMap" type="com.cwj.datasource.mysql.entity.CityTable">
        <!--@Table city_table-->
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="cityName" column="city_name" jdbcType="VARCHAR"/>
        <result property="cityCode" column="city_code" jdbcType="VARCHAR"/>
        <result property="provinceCode" column="province_code" jdbcType="VARCHAR"/>
        <result property="grade" column="grade" jdbcType="VARCHAR"/>
    </resultMap>


    <!--DAO层接口中方法的sql语句实现-->
    <!--查询单个-->
    <select id="queryById" resultMap="BaseResultMap">
        select
          id, city_name, city_code, province_code, grade
        from area_database.city_table
        where city_code = #{cityCode}
    </select>

    <!--查询指定行数据-->
    <select id="queryAllByLimit" resultMap="BaseResultMap">
        select
          id, city_name, city_code, province_code, grade
        from area_database.city_table
        limit #{offset}, #{limit}
    </select>

    <!--通过实体作为筛选条件查询-->
    <select id="queryAll" resultMap="BaseResultMap">
        select
          id, city_name, city_code, province_code, grade
        from area_database.city_table
        <where>
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="cityName != null and cityName != ''">
                and city_name = #{cityName}
            </if>
            <if test="cityCode != null and cityCode != ''">
                and city_code = #{cityCode}
            </if>
            <if test="provinceCode != null and provinceCode != ''">
                and province_code = #{provinceCode}
            </if>
            <if test="grade != null and grade != ''">
                and grade = #{grade}
            </if>
        </where>
    </select>

    <!--新增所有列-->
    <insert id="insert" keyProperty="cityCode" useGeneratedKeys="true">
        insert into area_database.city_table(id, city_name, province_code, grade)
        values (#{id}, #{cityName}, #{provinceCode}, #{grade})
    </insert>

    <!--通过主键修改数据-->
    <update id="update">
        update area_database.city_table
        <set>
            <if test="id != null">
                id = #{id},
            </if>
            <if test="cityName != null and cityName != ''">
                city_name = #{cityName},
            </if>
            <if test="provinceCode != null and provinceCode != ''">
                province_code = #{provinceCode},
            </if>
            <if test="grade != null and grade != ''">
                grade = #{grade},
            </if>
        </set>
        where city_code = #{cityCode}
    </update>

    <!--通过主键删除-->
    <delete id="deleteById">
        delete from area_database.city_table where city_code = #{cityCode}
    </delete>

    <!--auto generated by MybatisCodeHelper on 2021-08-03-->
    <!--sql 片段-->
    <sql id="Base_Column_List">
            id,
            city_name,
            city_code,
            province_code,
            grade
    </sql>

    <select id="selectAllByCityCodeOrderByCityName" resultMap="BaseResultMap">
        select
        <!--引用sql片段-->
        <include refid="Base_Column_List"/>
        from city_table
        where city_code=#{cityCode,jdbcType=VARCHAR} order by city_name asc
    </select>

</mapper>